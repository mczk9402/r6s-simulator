import type { NextPage } from 'next';
import Head from 'next/head';
import { Text } from '@nextui-org/react';
import { createClient } from 'microcms-js-sdk';
import { Section } from 'components/Section';
import { useState } from 'react';
import { useEffect } from 'react';

interface Data {
  name: string;
  team: string[];
  armor: string[];
  speed: string[];
  mainWeapons: {
    name: string;
    category: string;
  }[];
  subWeapons: {
    name: string;
    category: string;
  }[];
  gadgets: {
    attackerGadget: string[];
    defenderGadget: string[];
  };
  uniqueAbility: string;
}

interface Props {
  data: Data[];
}

type Categorys = {
  operators: string[];
  mainWeapons: string[];
  subWeapons: string[];
  gadgets: string[];
};

const Home: NextPage<Props> = ({ data }) => {
  const [categorys, setCategorys] = useState<Categorys>({
    operators: ['オペレーター'],
    mainWeapons: ['メインウェポン'],
    subWeapons: ['サブウェポン'],
    gadgets: ['ガジェット'],
  });

  console.log('client', data);

  useEffect(() => {
    data.map((item) => {
      setCategorys((prev) => ({
        ...prev,
        operators: [...prev.operators, item.name].filter((x, i, self) => self.indexOf(x) === i),
      }));

      item.mainWeapons.map((mainWeapon) =>
        setCategorys((prev) => ({
          ...prev,
          mainWeapons: [...prev.mainWeapons, mainWeapon.name].filter(
            (x, i, self) => self.indexOf(x) === i
          ),
        }))
      );

      item.subWeapons.map((subWeapon) =>
        setCategorys((prev) => ({
          ...prev,
          subWeapons: [...prev.subWeapons, subWeapon.name].filter(
            (x, i, self) => self.indexOf(x) === i
          ),
        }))
      );

      setCategorys((prev) => ({
        ...prev,
        gadgets: [
          ...prev.gadgets,
          ...item.gadgets.attackerGadget,
          ...item.gadgets.defenderGadget,
        ].filter((x, i, self) => self.indexOf(x) === i),
      }));
    });
  }, []);

  useEffect(() => {
    console.log(categorys);
  }, [categorys]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {Object.keys(categorys).map((category, index) => (
        <select key={index}>
          {categorys[category].map((category, index) => (
            <option value={category} key={index}>
              {category}
            </option>
          ))}
        </select>
      ))}

      <ul className="grid gap-8">
        {data.map((operator, index) => (
          <li key={index}>
            <Text h2 weight="bold">
              {operator.name}
            </Text>

            <Section title={operator.team[0]}>
              <div className="grid grid-flow-col gap-4 justify-start">
                <div>
                  <Text>体力</Text>
                  <ul className="grid grid-flow-col justify-start gap-1">
                    {[...Array(Number(operator.armor))].map((id) => (
                      <li key={id}>●</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <Text>スピード</Text>
                  <ul className="grid grid-flow-col justify-start gap-1">
                    {[...Array(Number(operator.speed))].map((id) => (
                      <li key={id}>○</li>
                    ))}
                  </ul>
                </div>
              </div>
            </Section>

            <Section title="メインウェポン">
              <ul className="grid justify-start ">
                {operator.mainWeapons.map((mainWeapon, index) => (
                  <li key={index}>
                    <Text>{mainWeapon.name}</Text>
                    <Text>{mainWeapon.category}</Text>
                  </li>
                ))}
              </ul>
            </Section>

            <Section title="サブウェポン">
              <ul className="grid grid-flow-col justify-start">
                {operator.subWeapons.map((subWeapon, index) => (
                  <li key={index}>
                    <Text>{subWeapon.name}</Text>
                    <Text>{subWeapon.category}</Text>
                  </li>
                ))}
              </ul>
            </Section>

            <Section title="ガジェット">
              <ul className="grid grid-flow-col justify-start">
                {[operator.gadgets.attackerGadget, ...operator.gadgets.defenderGadget].map(
                  (gadget, index) => (
                    <li key={index}>
                      <Text>{gadget}</Text>
                    </li>
                  )
                )}
              </ul>
            </Section>

            <Section title="固有アビリティ">
              <Text>{operator.uniqueAbility}</Text>
            </Section>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Home;

export const getStaticProps = async () => {
  const client = createClient({
    serviceDomain: process.env.MICROCMS_SERVICE_DOMAIN as string,
    apiKey: process.env.MICROCMS_API_KEY as string,
  });

  const data = await client.get({
    endpoint: 'operator',
    queries: {
      fields:
        'name,team,armor,speed,mainWeapons.name,mainWeapons.category,subWeapons.name,subWeapons.category,gadgets,uniqueAbility',
    },
  });

  return {
    props: {
      data: data.contents,
    },
  };
};
